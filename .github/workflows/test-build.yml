name: Test Build

on:
  pull_request:
    branches: [main]
jobs:
  build-pypi:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup and build
        run: |
              curl -LsSf https://astral.sh/uv/install.sh | sh
              uv pip install --system --break-system-packages -r requirements.txt
              uv pip install --system --break-system-packages twine build
              python3 -m build
  build-conda:
    runs-on: ubuntu-latest
    # sets default shell to remove need for source to run the conda shell
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    defaults:
      run:
        shell: bash -l {0}
    environment: test-deployment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Much better than manual installation, original version Miniconda2-4.7.10-Linux-x86_64.sh is broken
      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          activate-environment: ""
          miniconda-version: "latest"

      - name: Install the Conda Dependencies
        run: |
          conda config --set always_yes yes --set auto_update_conda false
          conda update conda
          conda install -n base conda-libmamba-solver
          conda install python=${{matrix.python-version}} conda-build colorama pip ruamel ruamel.yaml rich jsonschema uv -c conda-forge
          uv pip install -e .

      # echo yes before login to prevent anaconda bug breaking automation
      # git tags MUST be fetched otherwise output will be blank
      # bash variables cannot be used in github actions, must use actions specific syntax and methods
      # channels need to be specified on build and are saved in the package for installs
      - name: Build the Anaconda Package
        id: condabuild
        run: |
          conda install anaconda-client
          conda config --set anaconda_upload no --set solver libmamba
          tag_ver=$(git tag --list "v*[0-9]" --sort=version:refname | tail -1 | cut -c 2-)
          echo "gitversion=${tag_ver}" >> $GITHUB_OUTPUT
          VERSION_FROM_GIT_TAG="${tag_ver}test" conda build . -c mosek -c anaconda -c pvlib -c slacgismo -c conda-forge -c stanfordcvxgrp
